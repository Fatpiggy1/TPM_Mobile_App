import tkinter as tk
from tkinter import messagebox
import sqlite3
import os

# Setup database for persistent data
DB_FILE = "tpm_data.db"

def init_db():
    if not os.path.exists(DB_FILE):
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE work_orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                description TEXT NOT NULL
            )
        ''')
        conn.commit()
        conn.close()

# TPM application GUI
class TPMApp:
    def __init__(self, root):
        self.root = root
        self.root.title("TPM System")
        self.root.geometry("600x400")

        self.label = tk.Label(root, text="Welcome to TPM System", font=("Arial", 16))
        self.label.pack(pady=20)

        self.entry = tk.Entry(root, width=50)
        self.entry.pack(pady=10)

        self.add_button = tk.Button(root, text="Add Work Order", command=self.add_work_order)
        self.add_button.pack(pady=5)

        self.show_button = tk.Button(root, text="Show Work Orders", command=self.show_work_orders)
        self.show_button.pack(pady=5)

    def add_work_order(self):
        desc = self.entry.get().strip()
        if not desc:
            messagebox.showwarning("Input Error", "Please enter a work order description.")
            return
        try:
            conn = sqlite3.connect(DB_FILE)
            cursor = conn.cursor()
            cursor.execute("INSERT INTO work_orders (description) VALUES (?)", (desc,))
            conn.commit()
            conn.close()
            messagebox.showinfo("Success", "Work order added!")
            self.entry.delete(0, tk.END)
        except Exception as e:
            messagebox.showerror("Database Error", f"Failed to add work order:\n{e}")

    def show_work_orders(self):
        try:
            conn = sqlite3.connect(DB_FILE)
            cursor = conn.cursor()
            cursor.execute("SELECT id, description FROM work_orders")
            rows = cursor.fetchall()
            conn.close()

            if not rows:
                messagebox.showinfo("Work Orders", "No work orders found.")
                return

            orders = "\n".join([f"{r[0]}: {r[1]}" for r in rows])
            messagebox.showinfo("Work Orders", orders)
        except Exception as e:
            messagebox.showerror("Database Error", f"Failed to retrieve work orders:\n{e}")

# Main entry with error handling
if __name__ == "__main__":
    try:
        init_db()
        root = tk.Tk()
        app = TPMApp(root)
        root.mainloop()
    except Exception as e:
        messagebox.showerror("Fatal Error", f"An unexpected error occurred:\n{e}")
